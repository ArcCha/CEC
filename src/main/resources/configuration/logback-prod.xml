<!--
                                             Logging configuration for a production.
The logging information is written to:
* FILES
    - logs/cec.yyyy-mm-dd.log: all logs with debug level
    - logs/cec-error.yyyy-mm-dd.log all logs with error level
    - logging to those files is asynchronous, enhancing application performance
* REMOTE SERVER(in progress)
    - the SSLSocketAppender has to be configure with the proper server information.
Distinction between standard and error files simplify application monitoring. Errors can be quickly determine
without the need to grep standard log file.

Note:
    - For development purposes use logback.xml.
    - See LoggingUsage.java for more examples.
    - As for now properties files is under development, this configuration can be enabled by setting:
      -Dlogback.configurationFile=/path/to/this/file (ex: -Dlogback.configurationFile=C:\repa\CEC\src\main\resources\configuration\logback-prod.xml)
-->

<!--When debug is enabled internal logback status is printed, ex: errors during configuration file parsing -->
<configuration debug="false">

    <property name="LOGGING_DIR" value="logs"/>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGGING_DIR}/cec.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>2GB</totalSizeCap>
        </rollingPolicy>

        <encoder>
            <pattern>%date %level [%thread] %logger %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGGING_DIR}/cec-error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>2GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%date %level [%thread] %logger %msg%n</pattern>
        </encoder>
    </appender>

    <!--Note that by default, AsyncAppender will drop events of level TRACE, DEBUG and INFO if its queue is 80% full
            due to performance issue. Options like: queueSize, discardingThreshold, includeCallerData, maxFlushTime, neverBlock
            can be adjusted to the application needs.
    -->
    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE"/>
    </appender>

    <appender name="ASYNC_FILE_ERROR" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE"/>
    </appender>

    <!--
    Sample appender configuration for remote server logging
    <appender name="SOCKET" class="ch.qos.logback.classic.net.SSLSocketAppender">
        <remoteHost>${host}</remoteHost>
        <port>${port}</port>
        <reconnectionDelay>10000</reconnectionDelay>
        <ssl>
            <trustStore>
                <location>${truststore}</location>
                <password>${password}</password>
            </trustStore>
        </ssl>
    </appender>
    -->

    <root level="debug">
        <appender-ref ref="ASYNC_FILE"/>
        <appender-ref ref="ASYNC_FILE_ERROR"/>
    </root>
</configuration>
